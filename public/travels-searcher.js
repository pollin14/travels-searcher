(function(){
"use strict";
var PlacesRepository=function(){};PlacesRepository.prototype.findAll=function(e){return e="boolean"==typeof e?e:!0,[{value:"Terminal del Norte",slug:"terminal-del-norte",priority:0,category:"terminal"},{value:"Terminal Querétaro",slug:"terminal-queretaro",priority:0,category:"terminal"},{value:"Ciudad de México",slug:"ciudad-de-mexico",priority:1,category:"city"},{value:"Monterrey",slug:"monterrey",priority:0,category:"city"}]};
var RoutesRepository=function(){};RoutesRepository.prototype.findByOrigin=function(e){return[{value:"Terminal de Regreso",slug:"terminal-de-regreso",priority:0,category:"terminal"},{value:"Ciudad de Regreso",slug:"ciudad-de-regreso",priority:1,category:"city"}]};
var TravelSearcherForm=function(t,e){t="undefined"==typeof t?"/":t,e="undefined"==typeof e?"GET":e,this.form=document.createElement("form"),this.form.setAttribute("name","travelSearcherForm"),this.form.setAttribute("method",e),this.form.setAttribute("action",t)};TravelSearcherForm.prototype.add=function(t,e){var r=document.createElement("input");r.setAttribute("type","hidden"),r.setAttribute("name",t),r.setAttribute("value",e),this.form.appendChild(r)},TravelSearcherForm.prototype.submit=function(){document.getElementsByTagName("body")[0].appendChild(this.form),document.forms[this.form.getAttribute("name")].submit()};
!function(e){e.widget("clickbus.typeAheadByCategories",e.ui.autocomplete,{_create:function(){this._super(),this.widget().menu("option","items","> :not(.ui-autocomplete-category)")},_renderMenu:function(a,n){var i=this,r=t(n);e.each(r,function(e,t){var n=i.findCategoryByValue(e);a.append('<li class="ui-autocomplete-category">'+n.label+"</li>"),i.addItems(a,t,n)})},addItems:function(t,a,n){var i=this;e.each(a,function(e,a){var r=i._renderItemData(t,a);r.attr("aria-label",n.value+a.value)})},findCategoryByValue:function(e){for(var t=this.option("categories"),a=0;a<t.length;a++)if(t[a].value===e)return t[a];return null}});var t=function(t){var a={};return e.each(t,function(e,t){"undefined"==typeof a[t.category]&&(a[t.category]=[]),a[t.category].push(t)}),a}}(jQuery);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlcG9zaXRvcmllcy9QbGFjZXNSZXBvc2l0b3J5LmpzIiwiUmVwb3NpdG9yaWVzL1JvdXRlc1JlcG9zaXRvcnkuanMiLCJUeXBlcy9UcmF2ZWxTZWFyY2hlckZvcm0uanMiLCJ3aWRnZXRzL3R5cGVBaGVhZEJ5Q2F0ZWdvcmllcy5qcyJdLCJuYW1lcyI6WyJQbGFjZXNSZXBvc2l0b3J5IiwicHJvdG90eXBlIiwiZmluZEFsbCIsImVuYWJsZWRQYWdpbmF0aW9uIiwidmFsdWUiLCJzbHVnIiwicHJpb3JpdHkiLCJjYXRlZ29yeSIsIlJvdXRlc1JlcG9zaXRvcnkiLCJmaW5kQnlPcmlnaW4iLCJvcmlnaW4iLCJUcmF2ZWxTZWFyY2hlckZvcm0iLCJ1cmwiLCJtZXRob2QiLCJ0aGlzIiwiZm9ybSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFkZCIsIm5hbWUiLCJpbnB1dCIsImFwcGVuZENoaWxkIiwic3VibWl0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJmb3JtcyIsImdldEF0dHJpYnV0ZSIsIiQiLCJ3aWRnZXQiLCJ1aSIsImF1dG9jb21wbGV0ZSIsIl9jcmVhdGUiLCJfc3VwZXIiLCJtZW51IiwiX3JlbmRlck1lbnUiLCJ1bCIsIml0ZW1zIiwidGhhdCIsIml0ZW1zQnlDYXRlZ29yeSIsImdyb3VwQnlDYXRlZ29yeSIsImVhY2giLCJjYXRlZ29yeVZhbHVlIiwiZmluZENhdGVnb3J5QnlWYWx1ZSIsImFwcGVuZCIsImxhYmVsIiwiYWRkSXRlbXMiLCJpbmRleCIsIml0ZW0iLCJsaSIsIl9yZW5kZXJJdGVtRGF0YSIsImF0dHIiLCJjYXRlZ29yaWVzIiwib3B0aW9uIiwiaSIsImxlbmd0aCIsImJ5Q2F0ZWdvcnkiLCJwdXNoIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFLQSxHQUFJQSxrQkFBbUIsWUFPdkJBLGtCQUFpQkMsVUFBVUMsUUFBVSxTQUFVQyxHQUkzQyxNQUZBQSxHQUFpRCxpQkFBdEJBLEdBQWlDQSxHQUFtQixJQUl2RUMsTUFBTyxxQkFDUEMsS0FBTSxxQkFDTkMsU0FBVSxFQUNWQyxTQUFVLGFBR1ZILE1BQU8scUJBQ1BDLEtBQU0scUJBQ05DLFNBQVUsRUFDVkMsU0FBVSxhQUdWSCxNQUFPLG1CQUNQQyxLQUFNLG1CQUNOQyxTQUFVLEVBQ1ZDLFNBQVUsU0FHVkgsTUFBTyxZQUNQQyxLQUFNLFlBQ05DLFNBQVUsRUFDVkMsU0FBVTtBQ2pDdEIsR0FBSUMsa0JBQW1CLFlBSXZCQSxrQkFBaUJQLFVBQVVRLGFBQWUsU0FBVUMsR0FFaEQsUUFFUU4sTUFBTyxzQkFDUEMsS0FBTSxzQkFDTkMsU0FBVSxFQUNWQyxTQUFVLGFBR1ZILE1BQU8sb0JBQ1BDLEtBQU0sb0JBQ05DLFNBQVUsRUFDVkMsU0FBVTtBQ2Z0QixHQUFJSSxvQkFBcUIsU0FBVUMsRUFBS0MsR0FFcENELEVBQXlCLG1CQUFSQSxHQUFxQixJQUFLQSxFQUMzQ0MsRUFBNEIsbUJBQVhBLEdBQXdCLE1BQU9BLEVBRWhEQyxLQUFLQyxLQUFPQyxTQUFTQyxjQUFjLFFBQ25DSCxLQUFLQyxLQUFLRyxhQUFhLE9BQVEsc0JBQy9CSixLQUFLQyxLQUFLRyxhQUFhLFNBQVVMLEdBQ2pDQyxLQUFLQyxLQUFLRyxhQUFhLFNBQVVOLEdBR3JDRCxvQkFBbUJWLFVBQVVrQixJQUFNLFNBQVVDLEVBQU1oQixHQUUvQyxHQUFJaUIsR0FBUUwsU0FBU0MsY0FBYyxRQUNuQ0ksR0FBTUgsYUFBYSxPQUFRLFVBQzNCRyxFQUFNSCxhQUFhLE9BQVFFLEdBQzNCQyxFQUFNSCxhQUFhLFFBQVNkLEdBRTVCVSxLQUFLQyxLQUFLTyxZQUFZRCxJQUcxQlYsbUJBQW1CVixVQUFVc0IsT0FBUyxXQUNsQ1AsU0FDS1EscUJBQXFCLFFBQVEsR0FDN0JGLFlBQVlSLEtBQUtDLE1BRXRCQyxTQUFTUyxNQUFNWCxLQUFLQyxLQUFLVyxhQUFhLFNBQVNIO0NDbENuRCxTQUFXSSxHQU9QQSxFQUFFQyxPQUFPLGlDQUFrQ0QsRUFBRUUsR0FBR0MsY0FDNUNDLFFBQVMsV0FDTGpCLEtBQUtrQixTQUNMbEIsS0FBS2MsU0FBU0ssS0FBTSxTQUFVLFFBQVMsc0NBRTNDQyxZQUFhLFNBQVVDLEVBQUlDLEdBQ3ZCLEdBQUlDLEdBQWtCdkIsS0FDbEJ3QixFQUFrQkMsRUFBZ0JILEVBRXRDVCxHQUFFYSxLQUFLRixFQUFpQixTQUFVRyxFQUFlTCxHQUM3QyxHQUFJN0IsR0FBVzhCLEVBQUtLLG9CQUFvQkQsRUFFeENOLEdBQUdRLE9BQU8sd0NBQTBDcEMsRUFBU3FDLE1BQVEsU0FDckVQLEVBQUtRLFNBQVNWLEVBQUlDLEVBQU83QixNQUdqQ3NDLFNBQVUsU0FBVVYsRUFBSUMsRUFBTzdCLEdBQzNCLEdBQUk4QixHQUFPdkIsSUFFWGEsR0FBRWEsS0FBS0osRUFBTyxTQUFVVSxFQUFPQyxHQUMzQixHQUFJQyxHQUFLWCxFQUFLWSxnQkFBZ0JkLEVBQUlZLEVBQ2xDQyxHQUFHRSxLQUFLLGFBQWMzQyxFQUFTSCxNQUFRMkMsRUFBSzNDLFVBR3BEc0Msb0JBQXFCLFNBQVV0QyxHQUkzQixJQUFLLEdBRkQrQyxHQUFhckMsS0FBS3NDLE9BQU8sY0FFcEJDLEVBQUksRUFBR0EsRUFBSUYsRUFBV0csT0FBUUQsSUFDbkMsR0FBSUYsRUFBV0UsR0FBR2pELFFBQVVBLEVBQ3hCLE1BQU8rQyxHQUFXRSxFQUkxQixPQUFPLFFBUWYsSUFBSWQsR0FBaUIsU0FBVUgsR0FFM0IsR0FBSW1CLEtBVUosT0FSQTVCLEdBQUVhLEtBQUtKLEVBQU8sU0FBVVUsRUFBT0MsR0FDYyxtQkFBOUJRLEdBQVdSLEVBQUt4QyxZQUN2QmdELEVBQVdSLEVBQUt4QyxjQUdwQmdELEVBQVdSLEVBQUt4QyxVQUFVaUQsS0FBS1QsS0FHNUJRLElBRVpFIiwiZmlsZSI6InRyYXZlbHMtc2VhcmNoZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBQbGFjZXNSZXBvc2l0b3J5ID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbH0gZW5hYmxlZFBhZ2luYXRpb24gKG9wdGlvbmFsLCBkZWZhdWx0OnRydWUpXG4gKi9cblBsYWNlc1JlcG9zaXRvcnkucHJvdG90eXBlLmZpbmRBbGwgPSBmdW5jdGlvbiAoZW5hYmxlZFBhZ2luYXRpb24pIHtcblxuICAgIGVuYWJsZWRQYWdpbmF0aW9uID0gdHlwZW9mIGVuYWJsZWRQYWdpbmF0aW9uID09PSAnYm9vbGVhbic/IGVuYWJsZWRQYWdpbmF0aW9uOiB0cnVlO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6ICdUZXJtaW5hbCBkZWwgTm9ydGUnLFxuICAgICAgICAgICAgc2x1ZzogJ3Rlcm1pbmFsLWRlbC1ub3J0ZScsXG4gICAgICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndGVybWluYWwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiAnVGVybWluYWwgUXVlcsOpdGFybycsXG4gICAgICAgICAgICBzbHVnOiAndGVybWluYWwtcXVlcmV0YXJvJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICd0ZXJtaW5hbCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6ICdDaXVkYWQgZGUgTcOpeGljbycsXG4gICAgICAgICAgICBzbHVnOiAnY2l1ZGFkLWRlLW1leGljbycsXG4gICAgICAgICAgICBwcmlvcml0eTogMSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY2l0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6ICdNb250ZXJyZXknLFxuICAgICAgICAgICAgc2x1ZzogJ21vbnRlcnJleScsXG4gICAgICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY2l0eSdcbiAgICAgICAgfVxuICAgIF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFJvdXRlc1JlcG9zaXRvcnkgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cblJvdXRlc1JlcG9zaXRvcnkucHJvdG90eXBlLmZpbmRCeU9yaWdpbiA9IGZ1bmN0aW9uIChvcmlnaW4pIHtcblxuICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiAnVGVybWluYWwgZGUgUmVncmVzbycsXG4gICAgICAgICAgICBzbHVnOiAndGVybWluYWwtZGUtcmVncmVzbycsXG4gICAgICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndGVybWluYWwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiAnQ2l1ZGFkIGRlIFJlZ3Jlc28nLFxuICAgICAgICAgICAgc2x1ZzogJ2NpdWRhZC1kZS1yZWdyZXNvJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjaXR5J1xuICAgICAgICB9XG4gICAgXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgR0VUIG9yIFBPU1QgKGNhc2UgaW5zZW5zaXRpdmUpXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFRyYXZlbFNlYXJjaGVyRm9ybSA9IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCkge1xuXG4gICAgdXJsICAgICA9IHR5cGVvZiB1cmwgPT09ICd1bmRlZmluZWQnPyAnLyc6IHVybDtcbiAgICBtZXRob2QgID0gdHlwZW9mIG1ldGhvZCA9PT0gJ3VuZGVmaW5lZCc/ICdHRVQnOiBtZXRob2Q7XG5cbiAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdGhpcy5mb3JtLnNldEF0dHJpYnV0ZSgnbmFtZScsICd0cmF2ZWxTZWFyY2hlckZvcm0nKTtcbiAgICB0aGlzLmZvcm0uc2V0QXR0cmlidXRlKCdtZXRob2QnLCBtZXRob2QpO1xuICAgIHRoaXMuZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjdGlvbicsIHVybCk7XG59O1xuXG5UcmF2ZWxTZWFyY2hlckZvcm0ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuXG4gICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnaGlkZGVuJyk7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgbmFtZSk7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcblxuICAgIHRoaXMuZm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG59O1xuXG5UcmF2ZWxTZWFyY2hlckZvcm0ucHJvdG90eXBlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkb2N1bWVudFxuICAgICAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXVxuICAgICAgICAuYXBwZW5kQ2hpbGQodGhpcy5mb3JtKTtcblxuICAgIGRvY3VtZW50LmZvcm1zW3RoaXMuZm9ybS5nZXRBdHRyaWJ1dGUoJ25hbWUnKV0uc3VibWl0KCk7XG59O1xuIiwiKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICogV2lkZ2V0IERlZmluaXRpb25cbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgICQud2lkZ2V0KCdjbGlja2J1cy50eXBlQWhlYWRCeUNhdGVnb3JpZXMnLCAkLnVpLmF1dG9jb21wbGV0ZSwge1xuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICAgICAgdGhpcy53aWRnZXQoKS5tZW51KCAnb3B0aW9uJywgJ2l0ZW1zJywgJz4gOm5vdCgudWktYXV0b2NvbXBsZXRlLWNhdGVnb3J5KScgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3JlbmRlck1lbnU6IGZ1bmN0aW9uICh1bCwgaXRlbXMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ICAgICAgICAgICAgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGl0ZW1zQnlDYXRlZ29yeSA9IGdyb3VwQnlDYXRlZ29yeShpdGVtcyk7XG5cbiAgICAgICAgICAgICQuZWFjaChpdGVtc0J5Q2F0ZWdvcnksIGZ1bmN0aW9uIChjYXRlZ29yeVZhbHVlLCBpdGVtcykge1xuICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeSA9IHRoYXQuZmluZENhdGVnb3J5QnlWYWx1ZShjYXRlZ29yeVZhbHVlKTtcblxuICAgICAgICAgICAgICAgIHVsLmFwcGVuZCgnPGxpIGNsYXNzPVwidWktYXV0b2NvbXBsZXRlLWNhdGVnb3J5XCI+JyArIGNhdGVnb3J5LmxhYmVsICsgJzwvbGk+JyApO1xuICAgICAgICAgICAgICAgIHRoYXQuYWRkSXRlbXModWwsIGl0ZW1zLCBjYXRlZ29yeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkSXRlbXM6IGZ1bmN0aW9uICh1bCwgaXRlbXMsIGNhdGVnb3J5KSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpID0gdGhhdC5fcmVuZGVySXRlbURhdGEodWwsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGxpLmF0dHIoJ2FyaWEtbGFiZWwnLCBjYXRlZ29yeS52YWx1ZSArIGl0ZW0udmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmRDYXRlZ29yeUJ5VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgICAgICAgICB2YXIgY2F0ZWdvcmllcyA9IHRoaXMub3B0aW9uKCdjYXRlZ29yaWVzJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2F0ZWdvcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChjYXRlZ29yaWVzW2ldLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2F0ZWdvcmllc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKiBQcml2YXRlIGZ1bmN0aW9uc1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgdmFyIGdyb3VwQnlDYXRlZ29yeSA9ZnVuY3Rpb24gKGl0ZW1zKSB7XG5cbiAgICAgICAgdmFyIGJ5Q2F0ZWdvcnkgPSB7fTtcblxuICAgICAgICAkLmVhY2goaXRlbXMsIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBieUNhdGVnb3J5W2l0ZW0uY2F0ZWdvcnldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJ5Q2F0ZWdvcnlbaXRlbS5jYXRlZ29yeV0gPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnlDYXRlZ29yeVtpdGVtLmNhdGVnb3J5XS5wdXNoKGl0ZW0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYnlDYXRlZ29yeTtcbiAgICB9O1xufSkoalF1ZXJ5KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
